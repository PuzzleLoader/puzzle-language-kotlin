plugins {
    id 'java'
    id 'jigsaw'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm'
}

group = "com.github"

loom {
    splitEnvironmentSourceSets()

    mods {
        "puzzle-language-kotlin" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io" }
}

def LIBRARY_VERSIONS_FILE = "generated/library_versions.json"
def KOTLIN_VERSION_FILE = "generated/kotlin_version.txt"

def kotlinLib = "org.jetbrains.kotlin:kotlin-stdlib"
def libraries = [
        kotlinLib,
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
        "org.jetbrains.kotlin:kotlin-stdlib-jdk7",
        "org.jetbrains.kotlin:kotlin-reflect",

        "org.jetbrains.kotlinx:kotlinx-coroutines-core",
        "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm",
        "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8",
        "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm",
        "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm",
        "org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm",
        "org.jetbrains.kotlinx:atomicfu-jvm",
        "org.jetbrains.kotlinx:kotlinx-datetime-jvm"
]

import groovy.json.JsonSlurper
def libVersions = new JsonSlurper().parse(file(LIBRARY_VERSIONS_FILE))
def hasMissingLibVersion = !libVersions.keySet().containsAll(libraries)
def kotlinVersion = file(KOTLIN_VERSION_FILE).text

dependencies {
    libraries.forEach {
        bundle("${it}:${libVersions[it]}")
    }

    bundle("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    cosmicReach("finalforeach:cosmicreach:${cosmic_reach_version}")
}

version = modVersion + "+kotlin." + kotlinVersion

processResources {
    def resourceTargets = [ // Locations of where to inject the properties
        "puzzle.mod.json"
    ]

    // Left item is the name in the target, right is the variable name
    def replaceProperties = [
            "mod_version"     : modVersion,
            "mod_desc"       : desc,
            "mod_name"        : project.name,
            "mod_id"          : id,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

kotlin {
    jvmToolchain(17)
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

            artifact source: buildServerBundleJar, classifier: '', extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}
